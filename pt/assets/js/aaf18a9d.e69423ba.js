"use strict";(self.webpackChunkbrain_blog=self.webpackChunkbrain_blog||[]).push([[3532],{900:o=>{o.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/dunder-methods","metadata":{"permalink":"/pt/blog/dunder-methods","editUrl":"https://github.com/tchez/brain-blog/edit/main/blog/2025-06-11-dunder-methods.md","source":"@site/i18n/pt/docusaurus-plugin-content-blog/2025-06-11-dunder-methods.md","title":"Voc\xea sabe o que s\xe3o m\xe9todos m\xe1gicos em Python? Dica: Voc\xea usa todos os dias!","description":"Neste artigo, vamos explorar o fascinante mundo dos m\xe9todos m\xe1gicos em Python, seu prop\xf3sito e como eles podem aprimorar sua experi\xeancia de codifica\xe7\xe3o.","date":"2025-06-11T00:00:00.000Z","tags":[{"inline":true,"label":"python","permalink":"/pt/blog/tags/python"},{"inline":true,"label":"programa\xe7\xe3o","permalink":"/pt/blog/tags/programacao"},{"inline":true,"label":"artigo","permalink":"/pt/blog/tags/artigo"}],"readingTime":9.63,"hasTruncateMarker":true,"authors":[{"name":"Marco Ant\xf4nio Martins Porto Netto","title":"Full\u2011Stack Dev & AI\xa0Enthusiast","url":"https://github.com/tchez","imageURL":"https://github.com/tchez.png","key":"tchez","page":null}],"frontMatter":{"title":"Voc\xea sabe o que s\xe3o m\xe9todos m\xe1gicos em Python? Dica: Voc\xea usa todos os dias!","description":"Neste artigo, vamos explorar o fascinante mundo dos m\xe9todos m\xe1gicos em Python, seu prop\xf3sito e como eles podem aprimorar sua experi\xeancia de codifica\xe7\xe3o.","slug":"/dunder-methods","authors":["tchez"],"tags":["python","programa\xe7\xe3o","artigo"],"image":"/img/blog/dunder-methods/article-og.png"},"unlisted":false,"nextItem":{"title":"Bem\u2011vindo ao Brain\xa0Blog\xa0\ud83c\udf89","permalink":"/pt/blog/welcome"}},"content":"![Dunder Methods](/img/blog/dunder-methods/article-og.png)\\n\\n## Voc\xea sabe o que s\xe3o m\xe9todos m\xe1gicos em Python? Dica: Voc\xea usa todos os dias!\\n\\nH\xe1 alguns anos, quando estava aprendendo a usar o framework Django (o primeiro framework que aprendi), me deparei com uma caracter\xedstica peculiar das classes Python: o m\xe9todo construtor deve seguir um padr\xe3o espec\xedfico \u2014 ele deve ser identificado por underscores duplos (\\\\_\\\\_) antes e depois da palavra `init`. Isso me chamou a aten\xe7\xe3o; por que essa estrutura espec\xedfica?\\n\\n\x3c!-- truncate --\x3e\\n\\n```python\\nclass MinhaClasse:\\n    def __init__(self): # Este \xe9 o m\xe9todo construtor\\n        ...\\n```\\n\\nTentando entender de onde vieram essas fun\xe7\xf5es \'diferentes\', descobri que no mundo do Python, existem v\xe1rios m\xe9todos que seguem esse padr\xe3o \'dunder\' (um apelido derivado de Double UNDERscore). Esses m\xe9todos n\xe3o s\xe3o apenas comuns \u2014 eles s\xe3o especiais e fundamentais para a linguagem, conhecidos como dunder methods ou m\xe9todos m\xe1gicos.\\n\\nOK, mas o que esses m\xe9todos realmente fazem? O que os torna \'m\xe1gicos\'?\\n\\nEssas foram algumas das perguntas que me levaram a estud\xe1-los mais profundamente e a escrever este artigo. Espero que voc\xea goste :)\\n\\n---\\n\\n## O que s\xe3o dunder methods?\\n\\nNo mundo da programa\xe7\xe3o, muitas vezes nos deparamos com conceitos que parecem complexos \xe0 primeira vista, mas que, uma vez compreendidos, fazem total sentido. Um \xf3timo exemplo disso em Python s\xe3o os _dunder methods_.\\n\\nEnt\xe3o, o que exatamente s\xe3o esses m\xe9todos? Como mencionado anteriormente, a palavra \'dunder\' refere-se \xe0 nota\xe7\xe3o de underscore duplo no in\xedcio e no final dos nomes desses m\xe9todos especiais. Por exemplo, `__init__` para um construtor de classe, ou `__str__` para a representa\xe7\xe3o em string de um objeto.\\n\\n> P.S. Alguns puristas pythonicos n\xe3o gostam de chamar o m\xe9todo `__init__` de construtor, pois tecnicamente ele \xe9 um inicializador. No entanto, para simplificar, vamos nos referir a ele como construtor neste artigo.\\n\\nEsses m\xe9todos n\xe3o s\xe3o chamados diretamente pelo nome. Em vez disso, o Python os chama internamente quando certas a\xe7\xf5es s\xe3o realizadas. Por exemplo, quando adicionamos dois objetos usando o operador `+`, o Python chama internamente o m\xe9todo `__add__`, que lida com a l\xf3gica de adicionar um valor a outro.\\n\\n> Ficou confuso? Vou dar alguns exemplos para facilitar!\\n\\nImagine que voc\xea est\xe1 construindo uma classe para representar um livro em uma biblioteca. Para fazer isso, voc\xea precisar\xe1 implementar o m\xe9todo `__init__`, que atua como um construtor, configurando atributos iniciais como t\xedtulo, autor e contagem de p\xe1ginas:\\n\\n```python\\nclass Livro:\\n    def __init__(self, titulo, autor, paginas):\\n        self.titulo = titulo\\n        self.autor = autor\\n        self.paginas = paginas\\n```\\n\\nO que acontece quando voc\xea tenta adicionar dois objetos `Livro`? Voc\xea pode esperar que eles se combinem de alguma forma, mas o Python n\xe3o sabe como lidar com essa opera\xe7\xe3o por padr\xe3o:\\n\\n```python\\nlivro1 = Livro(\\"Primeiro Livro\\", \\"Autor A\\", 100)\\nlivro2 = Livro(\\"Segundo Livro\\", \\"Autor B\\", 200)\\n\\nprint(livro1 + livro2)\\n```\\n\\nIsso levantar\xe1 um `TypeError` porque o Python n\xe3o sabe como adicionar dois objetos `Livro`. Este c\xf3digo ir\xe1 gerar:\\n\\n```python\\n>>> TypeError: unsupported operand type(s) for +: \'Livro\' and \'Livro\'\\n```\\n\\nPara fazer essa opera\xe7\xe3o funcionar, voc\xea pode definir o m\xe9todo `__add__` na sua classe `Livro`. Este m\xe9todo especificar\xe1 como dois objetos `Livro` devem ser adicionados. Por exemplo, voc\xea pode querer adicionar suas contagens de p\xe1ginas:\\n\\n```python\\nclass Livro:\\n    def __init__(self, titulo, autor, paginas):\\n        self.titulo = titulo\\n        self.autor = autor\\n        self.paginas = paginas\\n\\n    def __add__(self, other):\\n        return self.paginas + other.paginas\\n```\\n\\nAgora, quando voc\xea tenta adicionar dois objetos `Livro`, o Python chamar\xe1 o m\xe9todo `__add__`, que neste caso somar\xe1 a quantidade de p\xe1ginas. \xc9 assim que voc\xea pode personalizar o comportamento dos operadores para suas pr\xf3prias classes.\\n\\n```python\\nlivro1 = Livro(\\"Primeiro Livro\\", \\"Autor A\\", 100)\\nlivro2 = Livro(\\"Segundo Livro\\", \\"Autor B\\", 200)\\n\\nprint(livro1 + livro2) # Isso vai imprimir: 300\\n```\\n\\n**Esse comportamento n\xe3o se limita apenas ao operador de adi\xe7\xe3o!**\\n\\nNa verdade, a maioria dos operadores em Python pode ser personalizada usando dunder methods. Por exemplo, voc\xea pode definir como sua classe se comporta com o operador `==` implementando o m\xe9todo `__eq__`, ou com o operador `-` implementando o m\xe9todo `__sub__`. Um bom exemplo disso \xe9 o operador `in`, quando verificamos se algum `valor` est\xe1 `in` uma `lista`, por baixo dos panos, o Python est\xe1 chamando o m\xe9todo `__contains__` da classe lista, passando o `valor` como argumento. Veja o exemplo abaixo:\\n\\n```python\\nminha_lista = [1, 2, 3, 4, 5]\\n\\nprint(3 in minha_lista)  # Isso vai imprimir: True\\nprint(minha_lista.__contains__(3))  # Isso tamb\xe9m vai imprimir: True\\n\\nprint(6 in minha_lista)  # Isso vai imprimir: False\\nprint(minha_lista.__contains__(6))  # Isso tamb\xe9m vai imprimir: False\\n```\\n\\n## Mais exemplos de dunder methods\\n\\nAgora que voc\xea tem uma compreens\xe3o b\xe1sica do que s\xe3o os dunder methods e como funcionam, vamos ver mais alguns exemplos de seu uso, ainda aplicados \xe0 classe `Livro`:\\n\\n### `__str__`: Customizando prints\\n\\nSeguindo o exemplo anterior, o que acontece quando voc\xea tenta imprimir um objeto `Livro`? Por padr\xe3o, o Python mostrar\xe1 algo como `<__main__.Book object at 0x...>`, que n\xe3o \xe9 muito informativo:\\n\\n```python\\nlivro1 = Livro(\\"Primeiro Livro\\", \\"Autor A\\", 100)\\nprint(livro1)\\n```\\n\\nIsso vai imprimir algo como:\\n\\n```python\\n>>> <__main__.Book object at 0x7f8c1b0d0>\\n```\\n\\nSe voc\xea est\xe1 se perguntando se \xe9 poss\xedvel personalizar essa sa\xedda, tornando a representa\xe7\xe3o mais amig\xe1vel ao usu\xe1rio, sim, \xe9! Voc\xea s\xf3 precisa implementar o m\xe9todo m\xe1gico chamado `__str__` em sua classe. Esse m\xe9todo permite que voc\xea defina como seu objeto deve ser representado como uma _string_. Ent\xe3o, vamos fazer isso:\\n\\n```python\\nclass Livro:\\n    def __init__(self, titulo, autor, paginas):\\n        self.titulo = titulo\\n        self.autor = autor\\n        self.paginas = paginas\\n\\n    def __str__(self):\\n        return f\\"{self.titulo} por {self.autor}, {self.paginas} p\xe1ginas\\"\\n```\\n\\nAgora, quando voc\xea imprime um objeto `Livro`, ele exibir\xe1 o t\xedtulo, autor e contagem de p\xe1ginas em um formato mais leg\xedvel:\\n\\n```python\\nlivro1 = Livro(\\"Primeiro Livro\\", \\"Autor A\\", 100)\\nprint(livro1) # Isso vai imprimir: Primeiro Livro por Autor A, 100 p\xe1ginas\\n```\\n\\n### `__eq__`: Customizando verifica\xe7\xf5es de igualdade\\n\\nE se voc\xea quiser verificar se dois objetos `Livro` s\xe3o considerados iguais? Por padr\xe3o, o Python verifica se eles s\xe3o o mesmo objeto na mem\xf3ria, o que pode n\xe3o ser o que voc\xea deseja. Para personalizar esse comportamento, voc\xea pode implementar o m\xe9todo `__eq__`:\\n\\n```python\\nclass Livro:\\n    def __init__(self, titulo, autor, paginas):\\n        self.titulo = titulo\\n        self.autor = autor\\n        self.paginas = paginas\\n\\n    def __eq__(self, other):\\n        return (self.titulo == other.titulo and\\n                self.autor == other.autor and\\n                self.paginas == other.paginas)\\n```\\n\\nAgora, voc\xea pode comparar a igualdade de dois objetos `Livro` com base em seus atributos:\\n\\n```python\\nlivro1 = Livro(\\"Primeiro Livro\\", \\"Autor A\\", 100)\\nlivro2 = Livro(\\"Segundo Livro\\", \\"Autor B\\", 200)\\nlivro3 = Livro(\\"Primeiro Livro\\", \\"Autor A\\", 100)\\n\\nprint(livro1 == livro2)  # Isso vai imprimir: False\\nprint(livro1 == livro3)  # Isso vai imprimir: True\\nprint(livro3.__eq__(livro1))  # Isso vai imprimir: True\\n```\\n\\n### `__len__`: Customizando verifica\xe7\xf5es de comprimento\\n\\nE se voc\xea quiser verificar quantas p\xe1ginas um livro tem? Voc\xea pode verificar manualmente o atributo `paginas`, mas tamb\xe9m pode implementar o m\xe9todo `__len__` para permitir o uso da fun\xe7\xe3o embutida `len()`:\\n\\n```python\\nclass Livro:\\n    def __init__(self, titulo, autor, paginas):\\n        self.titulo = titulo\\n        self.autor = autor\\n        self.paginas = paginas\\n\\n    def __len__(self):\\n        return self.paginas\\n```\\n\\nAgora, voc\xea pode usar a fun\xe7\xe3o `len()` em um objeto `Livro`:\\n\\n```python\\nlivro1 = Livro(\\"Primeiro Livro\\", \\"Autor A\\", 100)\\nprint(len(livro1))  # Isso vai imprimir: 100\\n```\\n\\n### `__getitem__`: Customizando o acesso a itens\\n\\nPor \xfaltimo, e se voc\xea quiser acessar um atributo espec\xedfico de um objeto `Livro` usando indexa\xe7\xe3o, como `livro[0]` para o t\xedtulo? Voc\xea pode implementar o m\xe9todo `__getitem__`:\\n\\n```python\\nclass Livro:\\n    def __init__(self, titulo, autor, paginas):\\n        self.titulo = titulo\\n        self.autor = autor\\n        self.paginas = paginas\\n\\n    def __getitem__(self, index):\\n        if index == 0:\\n            return self.titulo\\n        elif index == 1:\\n            return self.autor\\n        elif index == 2:\\n            return self.paginas\\n        else:\\n            raise IndexError(\\"\xcdndice fora do alcance\\")\\n```\\n\\nAgora, voc\xea pode acessar o t\xedtulo, autor e p\xe1ginas de um objeto `Livro` usando indexa\xe7\xe3o:\\n\\n```python\\nlivro1 = Livro(\\"Primeiro Livro\\", \\"Autor A\\", 100)\\nprint(livro1[0])  # Isso vai imprimir: Primeiro Livro\\nprint(livro1[1])  # Isso vai imprimir: Autor A\\nprint(livro1[2])  # Isso vai imprimir: 100\\n```\\n\\n## Conclus\xe3o\\n\\nEsses foram apenas alguns exemplos que destacam o poder e a flexibilidade dos dunder methods em Python. Com eles, voc\xea pode moldar o comportamento de suas classes e objetos de maneiras que se alinham com a sintaxe e os paradigmas da linguagem, tornando seu c\xf3digo mais intuitivo e \'Pythonico\'.\\n\\nEnt\xe3o, da pr\xf3xima vez que voc\xea estiver projetando uma classe Python, lembre-se da magia dos dunder methods e de como eles podem enriquecer suas abstra\xe7\xf5es!\\n\\nAbaixo, deixarei uma lista de alguns dos dunder methods mais usados em Python, cada um vinculado \xe0 documenta\xe7\xe3o oficial:\\n\\n- [`__init__`](https://docs.python.org/3/reference/datamodel.html#object.__init__): O m\xe9todo construtor, chamado quando um objeto \xe9 criado.\\n- [`__add__`](https://docs.python.org/3/reference/datamodel.html#object.__add__): Define o comportamento do operador de adi\xe7\xe3o (`+`).\\n- [`__contains__`](https://docs.python.org/3/reference/datamodel.html#object.__contains__): Define o comportamento do operador `in` para um objeto.\\n- [`__str__`](https://docs.python.org/3/reference/datamodel.html#object.__str__): Define a representa\xe7\xe3o em string de um objeto, usada pela fun\xe7\xe3o `print()`.\\n- [`__eq__`](https://docs.python.org/3/reference/datamodel.html#object.__eq__): Define o comportamento do operador de igualdade (`==`).\\n- [`__len__`](https://docs.python.org/3/reference/datamodel.html#object.__len__): Define o comportamento da fun\xe7\xe3o `len()` para um objeto.\\n- [`__getitem__`](https://docs.python.org/3/reference/datamodel.html#object.__getitem__): Define o comportamento da indexa\xe7\xe3o de um objeto (por exemplo, `obj[key]`).\\n- [`__setitem__`](https://docs.python.org/3/reference/datamodel.html#object.__setitem__): Define o comportamento de definir um item em um objeto (por exemplo, `obj[key] = value`).\\n- [`__delitem__`](https://docs.python.org/3/reference/datamodel.html#object.__delitem__): Define o comportamento de deletar um item de um objeto (por exemplo, `del obj[key]`).\\n- [`__repr__`](https://docs.python.org/3/reference/datamodel.html#object.__repr__): Define a representa\xe7\xe3o oficial de um objeto, usada pela fun\xe7\xe3o `repr()`.\\n- [`__ne__`](https://docs.python.org/3/reference/datamodel.html#object.__ne__): Define o comportamento do operador de desigualdade (`!=`).\\n- [`__lt__`](https://docs.python.org/3/reference/datamodel.html#object.__lt__): Define o comportamento do operador menor que (`<`).\\n- [`__le__`](https://docs.python.org/3/reference/datamodel.html#object.__le__): Define o comportamento do operador menor ou igual a (`<=`).\\n- [`__gt__`](https://docs.python.org/3/reference/datamodel.html#object.__gt__): Define o comportamento do operador maior que (`>`).\\n- [`__ge__`](https://docs.python.org/3/reference/datamodel.html#object.__ge__): Define o comportamento do operador maior ou igual a (`>=`).\\n- [`__sub__`](https://docs.python.org/3/reference/datamodel.html#object.__sub__): Define o comportamento do operador de subtra\xe7\xe3o (`-`).\\n- [`__mul__`](https://docs.python.org/3/reference/datamodel.html#object.__mul__): Define o comportamento do operador de multiplica\xe7\xe3o (`*`).\\n- [`__truediv__`](https://docs.python.org/3/reference/datamodel.html#object.__truediv__): Define o comportamento do operador de divis\xe3o verdadeira (`/`).\\n- [`__bool__`](https://docs.python.org/3/reference/datamodel.html#object.__bool__): Define o valor de verdade de um objeto, usado pela fun\xe7\xe3o `bool()`.\\n- [`__iter__`](https://docs.python.org/3/reference/datamodel.html#object.__iter__): Define o comportamento de um objeto quando usado em um loop ou com a fun\xe7\xe3o `iter()`.\\n- [`__next__`](https://docs.python.org/3/reference/datamodel.html#object.__next__): Define o comportamento da fun\xe7\xe3o `next()` para um objeto, permitindo que ele seja iter\xe1vel.\\n- [`__enter__`](https://docs.python.org/3/reference/datamodel.html#object.__enter__): Define o comportamento de um objeto quando usado em uma instru\xe7\xe3o `with`, permitindo que ele configure um contexto.\\n- [`__exit__`](https://docs.python.org/3/reference/datamodel.html#object.__exit__): Define o comportamento de um objeto ao sair de uma instru\xe7\xe3o `with`, permitindo que ele limpe recursos.\\n- [`__hash__`](https://docs.python.org/3/reference/datamodel.html#object.__hash__): Define o comportamento da fun\xe7\xe3o `hash()` para um objeto, permitindo que ele seja usado em cole\xe7\xf5es baseadas em hash, como conjuntos e dicion\xe1rios.\\n- [`__del__`](https://docs.python.org/3/reference/datamodel.html#object.__del__): Define o comportamento de um objeto quando est\xe1 prestes a ser destru\xeddo, permitindo a\xe7\xf5es de limpeza.\\n\\nEspero que este artigo tenha esclarecido um pouco sobre o fascinante mundo dos dunder methods em Python. Se voc\xea tiver alguma d\xfavida ou quiser compartilhar suas experi\xeancias com dunder methods, sinta-se \xe0 vontade para entrar em contato!\\n\\n## Refer\xeancias\\n\\n- [Python Official Documentation - Data Model](https://docs.python.org/3/reference/datamodel.html)\\n- [Dunder methods | Pydon\'t \ud83d\udc0d](https://mathspp.com/blog/pydonts/dunder-methods)\\n- [Dunder methods in Python, really crazy functions](https://nitesh-yadav.medium.com/dunder-methods-in-python-really-crazy-functions-3455ecb6472d)"},{"id":"welcome","metadata":{"permalink":"/pt/blog/welcome","editUrl":"https://github.com/tchez/brain-blog/edit/main/blog/2025-05-04-welcome.md","source":"@site/i18n/pt/docusaurus-plugin-content-blog/2025-05-04-welcome.md","title":"Bem\u2011vindo ao Brain\xa0Blog\xa0\ud83c\udf89","description":"Meu espa\xe7o pessoal para compartilhar ideias e despejar conhecimento estruturado.","date":"2025-05-04T00:00:00.000Z","tags":[{"inline":true,"label":"blog","permalink":"/pt/blog/tags/blog"}],"readingTime":1.19,"hasTruncateMarker":true,"authors":[{"name":"Marco Ant\xf4nio Martins Porto Netto","title":"Full\u2011Stack Dev & AI\xa0Enthusiast","url":"https://github.com/tchez","imageURL":"https://github.com/tchez.png","key":"tchez","page":null}],"frontMatter":{"title":"Bem\u2011vindo ao Brain\xa0Blog\xa0\ud83c\udf89","description":"Meu espa\xe7o pessoal para compartilhar ideias e despejar conhecimento estruturado.","slug":"welcome","authors":["tchez"],"tags":["blog"],"keywords":["brain blog","segundo c\xe9rebro","conhecimento estruturado","aprendizado","notas de estudo"],"image":"/img/logo-og.png"},"unlisted":false,"prevItem":{"title":"Voc\xea sabe o que s\xe3o m\xe9todos m\xe1gicos em Python? Dica: Voc\xea usa todos os dias!","permalink":"/pt/blog/dunder-methods"}},"content":"![Brain\xa0Blog](/img/logo-og.png)\\n\\nOl\xe1, mundo! \ud83d\udc4b\\n\\n\x3c!-- TODO: Adicionar link para o about me depois --\x3e\\n\\nSou [Marco\xa0Ant\xf4nio](https://www.linkedin.com/in/tchez) e este \xe9 o meu **Brain\xa0Blog**.\\n\\nEsta publica\xe7\xe3o \xe9 uma explica\xe7\xe3o do que voc\xea vai encontrar por aqui.\\n\\n\x3c!-- truncate --\x3e\\n\\n### Por que \u201cBrain\xa0Blog\u201d?\\n\\n> _\u201cQuem ensina aprende ao ensinar. E quem aprende ensina ao aprender.\u201d_\\n> \u2014 Paulo Freire\\n\\nA ideia do Brain\xa0Blog \xe9 fazer um \'backup\' do meu c\xe9rebro, onde anoto meus estudos, organizo refer\xeancias e documento minhas jornadas de aprendizado.\\n\\n### Estrutura do conte\xfado\\n\\nimport Tabs from \\"@theme/Tabs\\";\\nimport TabItem from \\"@theme/TabItem\\";\\n\\n<Tabs defaultValue=\\"blog\\">\\n <TabItem value=\\"blog\\" label=\\"Blog\\">\\n    <br/>\\n    > Meu espa\xe7o pessoal para compartilhar ideias e conhecimento.\\n    \\n    Aqui voc\xea encontrar\xe1 artigos, tutoriais e reflex\xf5es sobre temas que me interessam. Compartilharei tamb\xe9m experi\xeancias e aprendizados que considero relevantes.\\n  </TabItem>\\n  <TabItem value=\\"notes\\" label=\\"Notas\\">\\n    <br/>\\n    > Meu espa\xe7o pessoal para organizar conhecimento.\\n\\n    Aqui voc\xea encontrar\xe1 anota\xe7\xf5es, resumos e refer\xeancias sobre temas que estou estudando. O objetivo \xe9 criar um reposit\xf3rio de conhecimento que possa ser \xfatil para mim e para outras pessoas.\\n\\n    As notas est\xe3o divididas em tr\xeas categorias:\\n\\n    - **[Fundamentos](/notes/foundations/intro)**: explica\xe7\xf5es de fundamentos de programa\xe7\xe3o, como algoritmos, protocolos, linguagens, etc.\\n    - **[Projetos](/notes/projects/intro)**: anota\xe7\xf5es sobre projetos que estou desenvolvendo ou ideias que estou explorando.\\n    - **[Jornadas](/notes/journeys/intro)**: cada jornada documenta o processo de aprendizado de um tema espec\xedfico, com links para refer\xeancias e anota\xe7\xf5es dos materiais estudados.\\n\\n  </TabItem>\\n</Tabs>"}]}}')}}]);