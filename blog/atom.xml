<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tchez.dev/blog</id>
    <title>Brain Blog Blog</title>
    <updated>2025-06-11T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://tchez.dev/blog"/>
    <subtitle>Brain Blog Blog</subtitle>
    <icon>https://tchez.dev/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Do you know what magic methods are in Python? Hint: You use them every day!]]></title>
        <id>https://tchez.dev/blog/dunder-methods</id>
        <link href="https://tchez.dev/blog/dunder-methods"/>
        <updated>2025-06-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this article, we will explore the fascinating world of magic methods in Python, their purpose, and how they can enhance your coding experience. Let's dive in!]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="Dunder Methods" src="https://tchez.dev/assets/images/article-og-8dfb080971478ddeca220d443fe31cca.png" width="1260" height="720" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="do-you-know-what-magic-methods-are-in-python-hint-you-use-them-every-day">Do you know what magic methods are in Python? Hint: You use them every day!<a href="https://tchez.dev/blog/dunder-methods#do-you-know-what-magic-methods-are-in-python-hint-you-use-them-every-day" class="hash-link" aria-label="Direct link to Do you know what magic methods are in Python? Hint: You use them every day!" title="Direct link to Do you know what magic methods are in Python? Hint: You use them every day!">​</a></h2>
<p>A few years ago, when I was learning to use the Django framework (the first framework I ever learned), I came across a peculiar characteristic of Python classes: the constructor method has to follow a specific pattern — it must be identified by double underscores (__) before and after the word <code>init</code>. That struck me as odd; why this specific structure?</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">MyClass</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">__init__</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)"># This is the constructor method</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><br></span></code></pre></div></div>
<p>Trying to understand where these 'different' functions came from, I found out that in the world of Python, there are several methods that follow this 'dunder' pattern (a nickname derived from Double UNDERscore). These methods aren’t just common — they’re special and fundamental to the language, known as dunder methods or magic methods.</p>
<p>OK, but what do these methods actually do? What makes them 'magic'?</p>
<p>Those were some of the questions that led me to study them more deeply and write this article. Hope you enjoy it :)</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-are-dunder-methods">What are dunder methods?<a href="https://tchez.dev/blog/dunder-methods#what-are-dunder-methods" class="hash-link" aria-label="Direct link to What are dunder methods?" title="Direct link to What are dunder methods?">​</a></h2>
<p>In the world of programming, we often come across concepts that seem complex at first, but once understood, make perfect sense. A great example of this in Python is <em>dunder methods</em>.</p>
<p>So, what exactly are these methods? As mentioned earlier, the word 'dunder' refers to the double underscore notation at the beginning and end of the names of these special methods. For instance, <code>__init__</code> for a class constructor, or <code>__str__</code> for the string representation of an object.</p>
<blockquote>
<p>P.S. Some Python purists don’t like calling the <code>__init__</code> method a constructor, since technically it’s an initializer. However, for the sake of simplicity, we’ll refer to it as a constructor throughout this article.</p>
</blockquote>
<p>These methods aren’t called directly by name. Instead, Python calls them internally when certain actions are performed. For example, when we add two objects using the <code>+</code> operator, Python internally calls the <code>__add__</code> method, which handles the logic of adding one value to another.</p>
<blockquote>
<p>Still a bit confusing? Let me give you some examples to make it clearer!</p>
</blockquote>
<p>Imagine you're building a class to represent a book in a library. To do that, you’ll need to implement the <code>__init__</code> method, which acts as a constructor, setting up initial attributes like title, author, and page count:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">Book</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">__init__</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> title</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> author</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> pages</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">title </span><span class="token operator">=</span><span class="token plain"> title</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">author </span><span class="token operator">=</span><span class="token plain"> author</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pages </span><span class="token operator">=</span><span class="token plain"> pages</span><br></span></code></pre></div></div>
<p>What happens when you try to add two <code>Book</code> objects together? You might expect them to combine in some way, but Python doesn't know how to handle that operation by default:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">book1 </span><span class="token operator">=</span><span class="token plain"> Book</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"First Book"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Author A"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">100</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">book2 </span><span class="token operator">=</span><span class="token plain"> Book</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Second Book"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Author B"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">200</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">book1 </span><span class="token operator">+</span><span class="token plain"> book2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre></div></div>
<p>This will raise a <code>TypeError</code> because Python doesn't know how to add two <code>Book</code> objects together. This code will output:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token plain"> TypeError</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> unsupported operand </span><span class="token builtin" style="color:rgb(189, 147, 249)">type</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">s</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> </span><span class="token operator">+</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'Book'</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">and</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'Book'</span><br></span></code></pre></div></div>
<p>To make this operation work, you can define the <code>__add__</code> method in your <code>Book</code> class. This method will specify how two <code>Book</code> objects should be added together. For example, you might want to add their page counts:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">Book</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">__init__</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> title</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> author</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> pages</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">title </span><span class="token operator">=</span><span class="token plain"> title</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">author </span><span class="token operator">=</span><span class="token plain"> author</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pages </span><span class="token operator">=</span><span class="token plain"> pages</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">__add__</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> other</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pages </span><span class="token operator">+</span><span class="token plain"> other</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pages</span><br></span></code></pre></div></div>
<p>Now, when you try to add two <code>Book</code> objects, Python will call the <code>__add__</code> method, in this case, summing their page counts. This is how you can customize the behavior of operators for your own classes.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">book1 </span><span class="token operator">=</span><span class="token plain"> Book</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"First Book"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Author A"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">100</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">book2 </span><span class="token operator">=</span><span class="token plain"> Book</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Second Book"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Author B"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">200</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">book1 </span><span class="token operator">+</span><span class="token plain"> book2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)"># This will output: 300</span><br></span></code></pre></div></div>
<p><strong>This behavior isn't limited to just the addition operator!</strong></p>
<p>Actually, the most operators in Python can be customized using dunder methods. For example, you can define how your class behaves with the <code>==</code> operator by implementing the <code>__eq__</code> method, or with the <code>-</code> operator by implementing the <code>__sub__</code> method. A good example of this is the <code>in</code> operator, when we verify if some <code>value</code> is <code>in</code> a <code>list</code>, behind the scenes, Python is calling the <code>__contains__</code> method of the list class, passing the <code>value</code> as an argument. See the example below:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">my_list </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">4</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">5</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">3</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> my_list</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)"># This will output: True</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">my_list</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">__contains__</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)"># This will also output: True</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">6</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> my_list</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)"># This will output: False</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">my_list</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">__contains__</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">6</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)"># This will also output: False</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="more-examples-of-dunder-methods">More examples of dunder methods<a href="https://tchez.dev/blog/dunder-methods#more-examples-of-dunder-methods" class="hash-link" aria-label="Direct link to More examples of dunder methods" title="Direct link to More examples of dunder methods">​</a></h2>
<p>Now that you have a basic understanding of what dunder methods are and how they work, let's see some more examples of their usage, still applied to the <code>Book</code> class:</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="__str__-customizing-prints"><code>__str__</code>: Customizing prints<a href="https://tchez.dev/blog/dunder-methods#__str__-customizing-prints" class="hash-link" aria-label="Direct link to __str__-customizing-prints" title="Direct link to __str__-customizing-prints">​</a></h3>
<p>Following the previous example, what happens when you try to print a <code>Book</code> object? By default, Python will show something like <code>&lt;__main__.Book object at 0x...&gt;</code>, which isn't very informative:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">book1 </span><span class="token operator">=</span><span class="token plain"> Book</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"First Book"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Author A"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">100</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">book1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre></div></div>
<p>This will output something like:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token operator">&lt;</span><span class="token plain">__main__</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Book </span><span class="token builtin" style="color:rgb(189, 147, 249)">object</span><span class="token plain"> at </span><span class="token number">0x7f8c1b0d0</span><span class="token operator">&gt;</span><br></span></code></pre></div></div>
<p>If you're wondering whether it's possible to customize this output, making the representation more user-friendly, yes, it is! You just need to implement the magic method called <code>__str__</code> in your class. This method allows you to define how your object should be represented as a <em>string</em>. So, let's go ahead and implement it:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">Book</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">__init__</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> title</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> author</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> pages</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">title </span><span class="token operator">=</span><span class="token plain"> title</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">author </span><span class="token operator">=</span><span class="token plain"> author</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pages </span><span class="token operator">=</span><span class="token plain"> pages</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">__str__</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">f"</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token string-interpolation interpolation">self</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token string-interpolation interpolation">title</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)"> by </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token string-interpolation interpolation">self</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token string-interpolation interpolation">author</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">, </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token string-interpolation interpolation">self</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token string-interpolation interpolation">pages</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)"> pages"</span><br></span></code></pre></div></div>
<p>Now, when you print a <code>Book</code> object, it will display the title, author, and page count in a more readable format:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">book1 </span><span class="token operator">=</span><span class="token plain"> Book</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"First Book"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Author A"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">100</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">book1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)"># This will output: First Book by Author A, 100 pages</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="__eq__-customizing-equality-checks"><code>__eq__</code>: Customizing equality checks<a href="https://tchez.dev/blog/dunder-methods#__eq__-customizing-equality-checks" class="hash-link" aria-label="Direct link to __eq__-customizing-equality-checks" title="Direct link to __eq__-customizing-equality-checks">​</a></h3>
<p>What if you want to check if two <code>Book</code> objects are considered equal? By default, Python checks if they are the same object in memory, which might not be what you want. To customize this behavior, you can implement the <code>__eq__</code> method:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">Book</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">__init__</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> title</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> author</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> pages</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">title </span><span class="token operator">=</span><span class="token plain"> title</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">author </span><span class="token operator">=</span><span class="token plain"> author</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pages </span><span class="token operator">=</span><span class="token plain"> pages</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">__eq__</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> other</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">title </span><span class="token operator">==</span><span class="token plain"> other</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">title </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">and</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">author </span><span class="token operator">==</span><span class="token plain"> other</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">author </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">and</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pages </span><span class="token operator">==</span><span class="token plain"> other</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pages</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre></div></div>
<p>Now, you can compare two <code>Book</code> objects for equality based on their attributes:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">book1 </span><span class="token operator">=</span><span class="token plain"> Book</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"First Book"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Author A"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">100</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">book2 </span><span class="token operator">=</span><span class="token plain"> Book</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Second Book"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Author B"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">200</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">book3 </span><span class="token operator">=</span><span class="token plain"> Book</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"First Book"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Author A"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">100</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">book1 </span><span class="token operator">==</span><span class="token plain"> book2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)"># This will output: False</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">book1 </span><span class="token operator">==</span><span class="token plain"> book3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)"># This will output: True</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">book3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">__eq__</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">book1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)"># This will output: True</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="__len__-customizing-length-checks"><code>__len__</code>: Customizing length checks<a href="https://tchez.dev/blog/dunder-methods#__len__-customizing-length-checks" class="hash-link" aria-label="Direct link to __len__-customizing-length-checks" title="Direct link to __len__-customizing-length-checks">​</a></h3>
<p>What if you want to check how many pages a book has? You can manually check the <code>pages</code> attribute, but you can also implement the <code>__len__</code> method to allow the use of the built-in <code>len()</code> function:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">Book</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">__init__</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> title</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> author</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> pages</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">title </span><span class="token operator">=</span><span class="token plain"> title</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">author </span><span class="token operator">=</span><span class="token plain"> author</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pages </span><span class="token operator">=</span><span class="token plain"> pages</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">__len__</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pages</span><br></span></code></pre></div></div>
<p>Now, you can use the <code>len()</code> function on a <code>Book</code> object:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">book1 </span><span class="token operator">=</span><span class="token plain"> Book</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"First Book"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Author A"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">100</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">book1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)"># This will output: 100</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="__getitem__-customizing-item-access"><code>__getitem__</code>: Customizing item access<a href="https://tchez.dev/blog/dunder-methods#__getitem__-customizing-item-access" class="hash-link" aria-label="Direct link to __getitem__-customizing-item-access" title="Direct link to __getitem__-customizing-item-access">​</a></h3>
<p>Lastly, what if you want to access a specific attribute of a <code>Book</code> object using indexing, like <code>book[0]</code> for the title? You can implement the <code>__getitem__</code> method:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">Book</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">__init__</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> title</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> author</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> pages</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">title </span><span class="token operator">=</span><span class="token plain"> title</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">author </span><span class="token operator">=</span><span class="token plain"> author</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pages </span><span class="token operator">=</span><span class="token plain"> pages</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">__getitem__</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> index</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> index </span><span class="token operator">==</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">title</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">elif</span><span class="token plain"> index </span><span class="token operator">==</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">author</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">elif</span><span class="token plain"> index </span><span class="token operator">==</span><span class="token plain"> </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">pages</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">raise</span><span class="token plain"> IndexError</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Index out of range"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre></div></div>
<p>Now, you can access the title, author, and pages of a <code>Book</code> object using indexing:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">book1 </span><span class="token operator">=</span><span class="token plain"> Book</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"First Book"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Author A"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">100</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">book1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)"># This will output: First Book</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">book1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)"># This will output: Author A</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">book1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)"># This will output: 100</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://tchez.dev/blog/dunder-methods#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>These were just a few examples that highlight the power and flexibility of dunder methods in Python. With them, you can shape the behavior of your classes and objects in ways that align with the language's syntax and paradigms, making your code more intuitive and 'Pythonic'.</p>
<p>So, next time you're designing a Python class, remember the magic of dunder methods and how they can enrich your abstractions!</p>
<p>Bellow, I'll leave a list of some of the most commonly used dunder methods in Python, each linked to the official documentation for further reading:</p>
<ul>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" target="_blank" rel="noopener noreferrer"><code>__init__</code></a>: The constructor method, called when an object is created.</li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__add__" target="_blank" rel="noopener noreferrer"><code>__add__</code></a>: Defines the behavior of the addition operator (<code>+</code>).</li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__contains__" target="_blank" rel="noopener noreferrer"><code>__contains__</code></a>: Defines the behavior of the <code>in</code> operator for an object.</li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" target="_blank" rel="noopener noreferrer"><code>__str__</code></a>: Defines the string representation of an object, used by the <code>print()</code> function.</li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__eq__" target="_blank" rel="noopener noreferrer"><code>__eq__</code></a>: Defines the behavior of the equality operator (<code>==</code>).</li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__len__" target="_blank" rel="noopener noreferrer"><code>__len__</code></a>: Defines the behavior of the <code>len()</code> function for an object.</li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__getitem__" target="_blank" rel="noopener noreferrer"><code>__getitem__</code></a>: Defines the behavior of indexing an object (e.g., <code>obj[key]</code>).</li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__setitem__" target="_blank" rel="noopener noreferrer"><code>__setitem__</code></a>: Defines the behavior of setting an item in an object (e.g., <code>obj[key] = value</code>).</li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__delitem__" target="_blank" rel="noopener noreferrer"><code>__delitem__</code></a>: Defines the behavior of deleting an item from an object (e.g., <code>del obj[key]</code>).</li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" target="_blank" rel="noopener noreferrer"><code>__repr__</code></a>: Defines the official string representation of an object, used by the <code>repr()</code> function.</li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__ne__" target="_blank" rel="noopener noreferrer"><code>__ne__</code></a>: Defines the behavior of the inequality operator (<code>!=</code>).</li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__lt__" target="_blank" rel="noopener noreferrer"><code>__lt__</code></a>: Defines the behavior of the less than operator (<code>&lt;</code>).</li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__le__" target="_blank" rel="noopener noreferrer"><code>__le__</code></a>: Defines the behavior of the less than or equal to operator (<code>&lt;=</code>).</li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__gt__" target="_blank" rel="noopener noreferrer"><code>__gt__</code></a>: Defines the behavior of the greater than operator (<code>&gt;</code>).</li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__ge__" target="_blank" rel="noopener noreferrer"><code>__ge__</code></a>: Defines the behavior of the greater than or equal to operator (<code>&gt;=</code>).</li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__sub__" target="_blank" rel="noopener noreferrer"><code>__sub__</code></a>: Defines the behavior of the subtraction operator (<code>-</code>).</li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__mul__" target="_blank" rel="noopener noreferrer"><code>__mul__</code></a>: Defines the behavior of the multiplication operator (<code>*</code>).</li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__truediv__" target="_blank" rel="noopener noreferrer"><code>__truediv__</code></a>: Defines the behavior of the true division operator (<code>/</code>).</li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__bool__" target="_blank" rel="noopener noreferrer"><code>__bool__</code></a>: Defines the truth value of an object, used by the <code>bool()</code> function.</li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__iter__" target="_blank" rel="noopener noreferrer"><code>__iter__</code></a>: Defines the behavior of an object when used in a loop or with the <code>iter()</code> function.</li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__next__" target="_blank" rel="noopener noreferrer"><code>__next__</code></a>: Defines the behavior of the <code>next()</code> function for an object, allowing it to be iterable.</li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__enter__" target="_blank" rel="noopener noreferrer"><code>__enter__</code></a>: Defines the behavior of an object when used in a <code>with</code> statement, allowing it to set up a context.</li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__exit__" target="_blank" rel="noopener noreferrer"><code>__exit__</code></a>: Defines the behavior of an object when exiting a <code>with</code> statement, allowing it to clean up resources.</li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" target="_blank" rel="noopener noreferrer"><code>__hash__</code></a>: Defines the behavior of the <code>hash()</code> function for an object, allowing it to be used in hash-based collections like sets and dictionaries.</li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__del__" target="_blank" rel="noopener noreferrer"><code>__del__</code></a>: Defines the behavior of an object when it is about to be destroyed, allowing for cleanup actions.</li>
</ul>
<p>I hope this article has shed some light on the fascinating world of dunder methods in Python. If you have any questions or want to share your experiences with dunder methods, feel free to get in touch! Happy coding!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="references">References<a href="https://tchez.dev/blog/dunder-methods#references" class="hash-link" aria-label="Direct link to References" title="Direct link to References">​</a></h2>
<ul>
<li><a href="https://docs.python.org/3/reference/datamodel.html" target="_blank" rel="noopener noreferrer">Python Official Documentation - Data Model</a></li>
<li><a href="https://mathspp.com/blog/pydonts/dunder-methods" target="_blank" rel="noopener noreferrer">Dunder methods | Pydon't 🐍</a></li>
<li><a href="https://nitesh-yadav.medium.com/dunder-methods-in-python-really-crazy-functions-3455ecb6472d" target="_blank" rel="noopener noreferrer">Dunder methods in Python, really crazy functions</a></li>
</ul>]]></content>
        <author>
            <name>Marco Antônio Martins Porto Netto</name>
            <uri>https://github.com/tchez</uri>
        </author>
        <category label="python" term="python"/>
        <category label="programming" term="programming"/>
        <category label="article" term="article"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Welcome to Brain Blog 🎉]]></title>
        <id>https://tchez.dev/blog/welcome</id>
        <link href="https://tchez.dev/blog/welcome"/>
        <updated>2025-05-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[My personal place to share ideas and dump structured knowledge.]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="Brain&nbsp;Blog" src="https://tchez.dev/assets/images/logo-og-2f341927a68b033b11836f1447dc586f.png" width="1200" height="630" class="img_ev3q"></p>
<p>Hello, world! 👋</p>
<p>I’m <strong><a href="https://www.linkedin.com/in/tchez" target="_blank" rel="noopener noreferrer">Marco&nbsp;Antônio</a></strong> and this is my <strong>Brain&nbsp;Blog</strong>.</p>
<p>This first post is a quick tour of what you’ll find here.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-brainblog">Why “Brain&nbsp;Blog”?<a href="https://tchez.dev/blog/welcome#why-brainblog" class="hash-link" aria-label="Direct link to Why “Brain&nbsp;Blog”?" title="Direct link to Why “Brain&nbsp;Blog”?">​</a></h3>
<blockquote>
<p><em>“Those who teach learn while teaching, and those who learn teach while learning.”</em>
— Paulo Freire (Translated from Portuguese)</p>
</blockquote>
<p>Brain&nbsp;Blog is a public backup of my brain where I capture study notes,
organize references and document learning journeys.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="content-structure">Content structure<a href="https://tchez.dev/blog/welcome#content-structure" class="hash-link" aria-label="Direct link to Content structure" title="Direct link to Content structure">​</a></h3>
<!-- -->
<div class="tabs-container tabList__CuJ"><ul role="tablist" aria-orientation="horizontal" class="tabs"><li role="tab" tabindex="0" aria-selected="true" class="tabs__item tabItem_LNqP tabs__item--active">Blog</li><li role="tab" tabindex="-1" aria-selected="false" class="tabs__item tabItem_LNqP">Notes</li></ul><div class="margin-top--md"><div role="tabpanel" class="tabItem_Ymn6"><br><blockquote>
<p>My personal stream of ideas and experience.</p>
</blockquote><p>You’ll read articles, tutorials and reflections on topics that excite me,
plus lessons learned from real‑world projects.</p></div><div role="tabpanel" class="tabItem_Ymn6" hidden=""><br><blockquote>
<p>A structured knowledge vault.</p>
</blockquote><p>I publish notes, summaries and references from everything I study,
turning them into a reusable base.</p><p>Notes are split into three sections:</p><ul>
<li><strong><a href="https://tchez.dev/notes/foundations/intro">Foundations</a></strong> – core explanations of fundamentals (math, algorithms, protocols…).</li>
<li><strong><a href="https://tchez.dev/notes/projects/intro">Projects</a></strong> – write‑ups of things I’m building or ideas I’m exploring.</li>
<li><strong><a href="https://tchez.dev/notes/journeys/intro">Journeys</a></strong> – step‑by‑step road‑maps of mastering a specific topic, linking to resources and notes.</li>
</ul></div></div></div>]]></content>
        <author>
            <name>Marco Antônio Martins Porto Netto</name>
            <uri>https://github.com/tchez</uri>
        </author>
        <category label="blog" term="blog"/>
    </entry>
</feed>